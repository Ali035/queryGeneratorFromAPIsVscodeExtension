import {
  IFormValues,
  validationSchema,
  initialValues,
} from "./IForm";
import { Group${pluralFeatureName}FormFields } from "./formFields.ts"
import { useFormik } from "formik";
import { FormikHelpers } from "formik";
import usePage from "hooks/usePage";
import BasicForm from "components/common/basicForm";
import { submitEntity } from "utils/form";
import { useCreateGroup${pluralFeatureName} } from "features/${folderName}"

//* this component's responsibility is to initialize the formik. And wrap your form fields inside of the `BasicForm` component.

export const Group${pluralFeatureName}FormikHandler = () => {
  const { pageType } = usePage();

  // initializing submit and update robot mutation functions
  const { mutate, isLoading } = useCreateGroup${pluralFeatureName}();

  // formik's submit handler
  const submitHandler = (
    values: IFormValues,
    actions: FormikHelpers<IFormValues>
  ) => {
      const formData = new FormData();
      

      submitEntity(isLoading, mutate, formData, actions);
  };

  //initializing formik
  const formik = useFormik<IFormValues>({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: submitHandler,
    validateOnChange: false,
    validateOnBlur: false,
  });

  // the `BasicForm` component taking the block and unBlocking the form responsibility.
  // and also have submit and cancel button inside of it.
  return (
    <BasicForm
      formikSubmitHandler={formik.handleSubmit}
      isLoading={isLoading}
      pageType={pageType}
    >
      <Group${pluralFeatureName}FormFields formik={formik} />
    </BasicForm>
  );
};
